{"paragraphs":[{"text":"%md\n\n# Map and Collect\n\n- The main method by which you can manipulate data in PySpark is using `map()`. The `map()` transformation takes in a function and applies it to each element in the RDD. It can be used to do any number of things, from fetching the website associated with each URL in our collection to just squaring the numbers. In this simple exercise, you'll use `map()` transformation to cube each number of the `numbRDD` RDD that you created earlier. Next, you'll return all the elements to a variable and finally print the output.\n\n- Remember, you already have a `SparkContext` `sc`, and `numbRDD` available in your workspace.\n\n## Instructions\n- Create `map()` transformation that cubes all of the numbers in `numbRDD`.\n- Collect the results in a `numbers_all` variable.\n- Print the output from `numbers_all` variable.","user":"anonymous","dateUpdated":"2021-02-26T14:03:35+0530","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Map and Collect</h1>\n<ul>\n  <li>\n  <p>The main method by which you can manipulate data in PySpark is using <code>map()</code>. The <code>map()</code> transformation takes in a function and applies it to each element in the RDD. It can be used to do any number of things, from fetching the website associated with each URL in our collection to just squaring the numbers. In this simple exercise, you&rsquo;ll use <code>map()</code> transformation to cube each number of the <code>numbRDD</code> RDD that you created earlier. Next, you&rsquo;ll return all the elements to a variable and finally print the output.</p></li>\n  <li>\n  <p>Remember, you already have a <code>SparkContext</code> <code>sc</code>, and <code>numbRDD</code> available in your workspace.</p></li>\n</ul>\n<h2>Instructions</h2>\n<ul>\n  <li>Create <code>map()</code> transformation that cubes all of the numbers in <code>numbRDD</code>.</li>\n  <li>Collect the results in a <code>numbers_all</code> variable.</li>\n  <li>Print the output from <code>numbers_all</code> variable.</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1614328392179_784881488","id":"20201113-110338_1928025495","dateCreated":"2021-02-26T14:03:12+0530","dateStarted":"2021-02-26T14:03:35+0530","dateFinished":"2021-02-26T14:03:35+0530","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7427"},{"text":"%pyspark\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbRDD = sc.parallelize(numbers)\n\n# Create map() transformation to cube numbers\ncubedRDD = numbRDD.map(lambda x: ____)\n\n# Collect the results\nnumbers_all = cubedRDD.____()\n\n# Print the numbers from numbers_all\nfor numb in ____:\n    print(____)\n","user":"anonymous","dateUpdated":"2021-02-26T14:03:12+0530","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1614328392187_128410440","id":"20201113-133413_165094595","dateCreated":"2021-02-26T14:03:12+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:7428"},{"text":"%pyspark\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnumbRDD = sc.parallelize(numbers)\n\ncubedRDD = numbRDD.map(lambda x:x**3 )\nnumbers_all = cubedRDD.collect()\n\nfor numb in numbers_all:\n    print(numb)\n","user":"anonymous","dateUpdated":"2021-02-26T14:05:38+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"1\n8\n27\n64\n125\n216\n343\n512\n729\n1000\n"}]},"apps":[],"jobName":"paragraph_1614328430195_-1006361012","id":"20210226-140350_313945991","dateCreated":"2021-02-26T14:03:50+0530","dateStarted":"2021-02-26T14:05:38+0530","dateFinished":"2021-02-26T14:05:41+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:7429"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2021-02-26T14:05:38+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1614328538695_-1165593995","id":"20210226-140538_448869664","dateCreated":"2021-02-26T14:05:38+0530","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:7430"}],"name":"/BDFWithPySpark/M2/SM2/Ex1","id":"2FXMDAQZM","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"sh:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}