{"paragraphs":[{"text":"%md\n\n# Use of lambda() with map()\n\n- The `map()` function in Python returns a list of the results after applying the given `function` to each item of a given `iterable` (`list`, `tuple` etc.). The general syntax of `map()` function is `map(fun, iter)`. We can also use lambda functions with `map()`. The general syntax of `map()` function with `lambda()` is `map(lambda <agument>:<expression>, iter)`.\n\n> In this exercise, you'll be using lambda function inside the `map()` built-in function to square all numbers in the list.\n\n## Instructions\n- Print `my_list` which is available in your environment.\n- Square each item in `my_list` using `map()` and `lambda()`.\n- Print the result of map function.","user":"anonymous","dateUpdated":"2021-02-26T16:40:50+0530","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Use of lambda() with map()</h1>\n<ul>\n  <li>The <code>map()</code> function in Python returns a list of the results after applying the given <code>function</code> to each item of a given <code>iterable</code> (<code>list</code>, <code>tuple</code> etc.). The general syntax of <code>map()</code> function is <code>map(fun, iter)</code>. We can also use lambda functions with <code>map()</code>. The general syntax of <code>map()</code> function with <code>lambda()</code> is <code>map(lambda &lt;agument&gt;:&lt;expression&gt;, iter)</code>.</li>\n</ul>\n<blockquote>\n  <p>In this exercise, you&rsquo;ll be using lambda function inside the <code>map()</code> built-in function to square all numbers in the list.</p>\n</blockquote>\n<h2>Instructions</h2>\n<ul>\n  <li>Print <code>my_list</code> which is available in your environment.</li>\n  <li>Square each item in <code>my_list</code> using <code>map()</code> and <code>lambda()</code>.</li>\n  <li>Print the result of map function.</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1614320472892_-1136884974","id":"20201113-111914_205968237","dateCreated":"2021-02-26T11:51:12+0530","dateStarted":"2021-02-26T16:40:51+0530","dateFinished":"2021-02-26T16:40:51+0530","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3408"},{"text":"%pyspark\n\n# script.py\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# Print my_list in the console\nprint(\"Input list is\", ____)\n\n# Square all numbers in my_list\nsquared_list_lambda = list(____(lambda x: ____, my_list))\n\n# Print the result of the map function\nprint(\"The squared numbers are\", ____)","user":"anonymous","dateUpdated":"2021-02-26T11:52:26+0530","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Fail to execute line 4: print(\"Input list is\", ____)\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-514725777414855590.py\", line 375, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 4, in <module>\nNameError: name '____' is not defined\n"}]},"apps":[],"jobName":"paragraph_1614320472915_-1455794475","id":"20201113-112611_1449842881","dateCreated":"2021-02-26T11:51:12+0530","dateStarted":"2021-02-26T11:52:26+0530","dateFinished":"2021-02-26T11:52:26+0530","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:3409"},{"text":"%pyspark\n\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(my_list)\n\nsquared_list = list(map(lambda item : item**2 , my_list))\n\nprint(\"The squared numbers are\", squared_list)","user":"anonymous","dateUpdated":"2021-02-26T11:55:01+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nThe squared numbers are [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"}]},"apps":[],"jobName":"paragraph_1614320533268_707919832","id":"20210226-115213_1581984625","dateCreated":"2021-02-26T11:52:13+0530","dateStarted":"2021-02-26T11:55:01+0530","dateFinished":"2021-02-26T11:55:01+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3410"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2021-02-26T11:55:01+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1614320701116_595730100","id":"20210226-115501_1503586644","dateCreated":"2021-02-26T11:55:01+0530","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:3411"}],"name":"/BDFWithPySpark/M1/SM3/Ex1","id":"2FZHCDEFB","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"sh:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}