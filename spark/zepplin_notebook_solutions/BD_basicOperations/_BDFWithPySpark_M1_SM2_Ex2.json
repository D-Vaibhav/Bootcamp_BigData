{"paragraphs":[{"text":"%md\n# Interactive Use of PySpark\n\n- Spark comes with an interactive python shell in which PySpark is already installed in it. PySpark shell is useful for basic testing and debugging and it is quite powerful. The easiest way to demonstrate the power of PySpark’s shell is to start using it. In this example, you'll load a simple list containing numbers ranging from 1 to 100 in the PySpark shell.\n\n- The most important thing to understand here is that we are not creating any `SparkContext` object because PySpark automatically creates the `SparkContext` object named `sc`, by default in the PySpark shell.\n\n## Instructions\n- Create a python list named `numb` containing the numbers 1 to 100.\n- Load the list into Spark using Spark Context's `parallelize` method and assign it to a variable `spark_data`.","user":"anonymous","dateUpdated":"2021-02-26T11:27:10+0530","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Interactive Use of PySpark</h1>\n<ul>\n  <li>\n  <p>Spark comes with an interactive python shell in which PySpark is already installed in it. PySpark shell is useful for basic testing and debugging and it is quite powerful. The easiest way to demonstrate the power of PySpark’s shell is to start using it. In this example, you&rsquo;ll load a simple list containing numbers ranging from 1 to 100 in the PySpark shell.</p></li>\n  <li>\n  <p>The most important thing to understand here is that we are not creating any <code>SparkContext</code> object because PySpark automatically creates the <code>SparkContext</code> object named <code>sc</code>, by default in the PySpark shell.</p></li>\n</ul>\n<h2>Instructions</h2>\n<ul>\n  <li>Create a python list named <code>numb</code> containing the numbers 1 to 100.</li>\n  <li>Load the list into Spark using Spark Context&rsquo;s <code>parallelize</code> method and assign it to a variable <code>spark_data</code>.</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1614319030801_-2004139954","id":"20201113-111914_205968237","dateCreated":"2021-02-26T11:27:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1950"},{"text":"%pyspark\n\n# Create a python list of numbers from 1 to 100 \nnumb = range(____, ____)\n\n# Load the list into PySpark  \nspark_data = sc.____(numb)\n","user":"anonymous","dateUpdated":"2021-02-26T11:27:10+0530","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1614319030802_-551905292","id":"20201113-112611_1449842881","dateCreated":"2021-02-26T11:27:10+0530","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1951"},{"text":"%pyspark\n\nnumb = list(range(1,101))\n\nspark_data = sc.parallelize(numb)\n\nspark_data.collect()","user":"anonymous","dateUpdated":"2021-02-26T11:33:50+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n"}]},"apps":[],"jobName":"paragraph_1614319298701_-959027638","id":"20210226-113138_848103111","dateCreated":"2021-02-26T11:31:38+0530","dateStarted":"2021-02-26T11:33:50+0530","dateFinished":"2021-02-26T11:33:50+0530","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1952"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2021-02-26T11:33:01+0530","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1614319381254_1431978854","id":"20210226-113301_555439349","dateCreated":"2021-02-26T11:33:01+0530","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:1953"}],"name":"/BDFWithPySpark/M1/SM2/Ex2","id":"2FY97XUYV","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"sh:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}